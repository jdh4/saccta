import sponsor
from collections import defaultdict

## oostland, users, accounts, rc.princeton.edu
#dn: uid=oostland,cn=users,cn=accounts,dc=rc,dc=princeton,dc=edu
#uid: oostland
#displayname: Marlies Oostland
#manager: uid=sswang,cn=users,cn=accounts,dc=rc,dc=princeton,dc=edu

## gbwright, users, accounts, rc.princeton.edu
#dn: uid=gbwright,cn=users,cn=accounts,dc=rc,dc=princeton,dc=edu
#uid: gbwright
#displayname: Garrett Wright
#manager: uid=curt,cn=users,cn=accounts,dc=rc,dc=princeton,dc=edu
#destinationindicator: della:curt=R2FycmV0dCBpcyBhIGRldmVsb3BlciBpbiBSQw==,tige
# r:wtang=Mjc5MjQ=,tigress:curt=R2FycmV0dCBpcyBhIGRldmVsb3BlciBpbiBSQw==,traver
# se:curt=Mjg1MTg=

# achien, users, accounts, rc.princeton.edu
#dn: uid=achien,cn=users,cn=accounts,dc=rc,dc=princeton,dc=edu
#uid: achien
#displayname: Abe Chien
#manager: uid=hji,cn=users,cn=accounts,dc=rc,dc=princeton,dc=edu
#destinationindicator: traverse:hji=dGlja2V0IDMyMzY2

def extract_lastname_from_fullname(s: str) -> str:
    """Extract last name from the full name of the person. Use with caution
       downstream since sponsors can have the same last name."""
    names = list(filter(lambda x: x not in ['Jr.', 'II', 'III', 'IV'], s.split()))
    if len(names) == 2:
        if len(names[1]) > 1: return names[1]
        else: return " ".join(names)
    elif (len(names) > 2):
        idx = 0
        while (names[idx].endswith('.') and (idx < len(names) - 1)):
          idx += 1
        names = names[idx:]
        e = ''.join([str(int(name.endswith('.'))) for name in names])
        if '1' in e: return ' '.join(names[e.index('1') + 1:])
        else: return names[-1]
    else:
        return " ".join(names)

def get_sponsor_netid_per_cluster_dict_from_dump(netid):
    if netid == "be9636":
        netid = "eysenbach"
    elif netid == "eonal":
        primary = "danqic"
        return {"della":primary, "stellar":primary, "tiger":primary, "tigressdata":primary, "traverse":primary}
    elif netid == "jg4602":
        primary = "macohen"
        return {"della":primary, "stellar":primary, "tiger":primary, "tigressdata":primary, "traverse":primary}
    elif netid == "jl8736":
        primary = "cm49"
        return {"della":primary, "stellar":primary, "tiger":primary, "tigressdata":primary, "traverse":primary}
    elif netid == "yixiaoc":
        primary = "rcar"
        return {"della":primary, "stellar":primary, "tiger":primary, "tigressdata":primary, "traverse":primary}
    elif netid == "zh6094":
        primary = "danqic"
        return {"della":primary, "stellar":primary, "tiger":primary, "tigressdata":primary, "traverse":primary}

    with open("multiple_sponsors/ldap.dump") as fo:
        lines = fo.readlines()
    found = False
    manager_count = 0
    d = {}
    concat = ""
    for line in lines:
        line = line.strip()
        if f"uid: {netid}" in line:
            found = True
        if found:
            concat += line
        if found and "manager:" in line:
            primary = line.split("manager: uid=")[-1].split(",")[0]
            d = {"della":primary, "stellar":primary, "tiger":primary, "tigressdata":primary, "traverse":primary}
            manager_count += 1
        if found and line == "":
            if "destinationindicator" in concat:
                cluster_specific = concat.split("destinationindicator: ")[-1].split(",")
                for c in cluster_specific:
                    host, raw_sponsor_netid = c.split(":")
                    sponsor_netid = raw_sponsor_netid[:raw_sponsor_netid.index("=")]
                    if host in ('della', 'stellar', 'tiger', 'tigress', 'tigressdata', 'traverse'):
                        d[host] = sponsor_netid if sponsor_netid != "USER" else netid
                    else:
                        pass
            break
    assert d != {}, f"{netid}"
    assert manager_count == 1, f"{netid}"
    if len(set(d.values())) != 1: print(f"W: {netid} has multiple sponsors: {d}", flush=True)
    return d

def main():
    # input file is generated by https://github.com/jdh4/saccta/blob/main/rc_users_by_year.sh
    sponsor_users = defaultdict(list)
    with open("user_cluster_2023", "r") as fo:
        lines = fo.readlines()
    pairs = [line.strip().split("|") for line in lines]
    for netid, cluster in pairs:
        cluster = "tiger" if cluster == "tiger2" else cluster
        #d = sponsor.get_sponsor_netid_per_cluster_dict_from_ldap(netid, verbose=True, strip=False)
        d = get_sponsor_netid_per_cluster_dict_from_dump(netid)
        sponsor_users[d[cluster]].append(netid)

    import pandas as pd
    df = pd.DataFrame({"Sponsor NetID":sponsor_users.keys(), "users":sponsor_users.values()})
    df["Full Name"] = df["Sponsor NetID"].apply(lambda x: sponsor.get_full_name_from_ldap(x))
    df["LastName"] = df["Full Name"].apply(lambda x: extract_lastname_from_fullname(x))
    df = df.sort_values(by="LastName")
    df = df.reset_index(drop=True)
    df.index += 1
    df["Group Members"] = df.users.apply(lambda x: ", ".join(sorted(set(x))))
    cols = ["Full Name", "Sponsor NetID", "Group Members"]
    df[cols].to_latex("sponsors_users.tex", longtable=True)
    df[cols].to_csv("sponsors_users.csv")
    print(f"Number of sponsors: {df.shape[0]}")

    # check the results
    df = pd.read_csv("sponsors_users.csv")
    col = df["Group Members"].tolist()
    x = ",".join(col)
    processed = [y.strip() for y in x.split(",")]
    with open("large_cluster_users_2023", "r") as f:
        data = f.readlines()
    users = [d.strip() for d in data]
    assert set(processed) - set(users) == set()

 
if __name__ == "__main__":
    main()
